package GraphSearchAlgorithmIII;

import java.util.*;

/*
Find the Kth smallest number s such that s = 3 ^ x * 5 ^ y * 7 ^ z, x > 0 and y > 0 and z > 0, x, y, z are all integers.

Assumptions

    K >= 1

Examples

    the smallest is 3 * 5 * 7 = 105
    the 2nd smallest is 3 ^ 2 * 5 * 7 = 315
    the 3rd smallest is 3 * 5 ^ 2 * 7 = 525
    the 5th smallest is 3 ^ 3 * 5 * 7 = 945


 */
public class kthSmallestWithOnly357AsFactors {
    //pq
    public long kth(int k) {
        Set<Long> visited = new HashSet<>();
        PriorityQueue <Long> pq = new PriorityQueue<>(k);
        pq.offer(3 * 5 * 7L);
        visited.add(3 * 5 * 7L);
        long cur = 0;
        while (k > 0) {
            cur = pq.poll();
            if (visited.add(cur * 3)) {
                pq.offer(cur * 3);
            }
            if (visited.add(cur * 5)) {
                pq.offer(cur * 5);
            }
            if (visited.add(cur * 7)) {
                pq.offer(cur * 7);
            }
            k--;
        }
        return cur;
    }
    //tricky way
    public long kth2(int k) {
        long seed = 3 * 5 * 7L;
        Deque<Long> threes = new LinkedList<>(); //3^a
        Deque<Long> fives = new LinkedList<>(); //3^a * 5 ^ b
        Deque<Long> sevens = new LinkedList<>(); //3^a * 5 ^ b * 7 ^ c
        threes.add(seed * 3);
        fives.add(seed * 5);
        sevens.add(seed * 7);
        long result = seed;

        while (k > 1) {
            //three is samllest
            long three = threes.peekFirst();
            long five = fives.peekFirst();
            long seven = sevens.peekFirst();

            if (three < five && three < seven) {
                result = threes.pollFirst();
                threes.offerLast(result * 3);
                fives.offerLast(result * 5);
                sevens.offerLast(result * 7);
            }

            //x = 3^a * 5^b
            //x * 3 is generated by 3^(a+1) * 5^(b - 1)
            else if (five < three && five < seven) {
                result = fives.pollFirst();
                fives.offerLast(result * 5);
                sevens.offerLast(result * 7);
            }

             else {
                 result = sevens.pollFirst();
                 sevens.offerLast(result * 7);
            }
             k--;
        }
        return result;
    }
}
