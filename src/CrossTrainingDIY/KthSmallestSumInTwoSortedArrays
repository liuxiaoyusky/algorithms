
/*
Given two sorted arrays A and B, of sizes m and n respectively. Define s = a + b, where a is one element from A and b is one element from B. Find the Kth smallest s out of all possible s'.

Assumptions

    A is not null and A is not of zero length, so as B
    K > 0 and K <= m * n

Examples

A = {1, 3, 5}, B = {4, 8}

    1st smallest s is 1 + 4 = 5
    2nd smallest s is 3 + 4 = 7
    3rd, 4th smallest s are 9 (1 + 8, 4 + 5)
    5th smallest s is 3 + 8 = 11
 */

public class Solution {
    // naive way: use a proirty queue to find all possible solutions and find kth element
    // one step further, keep a k length priority queue and go iterate all elements
    //one step further, have a m*n matrix to track all checked cell, have a min heap to store all possibility for
    //  next selection, Time: O(2klog2k) Space(2k)
    //Optimize: if k close to m*n, find m*n - k from the other side

    //do it by interative way
    public int kthSum(int[] A, int[] B, int k) {
        //helper class
        class Cell{
            int value;
            int row;
            int column;

            public Cell (int value, int row, int column) {
                this.value = value;
                this.row = row;
                this.column = column;
            }
        }

        //start solving
        //corner case skip for now since k>0 and k<mn is given
        int count = 1;
        int m = A.length;
        int n = B.length;
        boolean [][] checked = new boolean [m][n];
        PriorityQueue <Cell> pq = new PriorityQueue<>(new Comparator<Cell> () {
            public int compare (Cell c1, Cell c2) {
                return c1.value - c2.value;
            }
        });
        pq.offer(new Cell(A[0] + B[0], 0, 0));
        checked[0][0] = true;

        //keep going until the kth element
        while (count < k) {
            Cell cur = pq.poll();
            int row = cur.row;
            int col = cur.column;


            if (row + 1 < m && !checked[row + 1][col]) {
                pq.offer(new Cell(A[row + 1] + B[col], row + 1, col));
                checked[row + 1][col] = true;
            }

            if (col + 1 < n && ! checked[row][col + 1]) {
                pq.offer(new Cell(A[row] + B[col + 1], row, col + 1));
                checked[row][col + 1] = true;
            }

            count++;
        }

        return pq.peek().value;
    }
}
